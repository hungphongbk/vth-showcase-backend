# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddCommentsToShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddHighlightFeaturesToShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddImageListsToShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddImagesToImageListInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

enum AuthRoleType {
  ADMIN
  INVESTOR
  SUPERADMIN
  USER
}

input AuthRoleTypeFilterComparison {
  eq: AuthRoleType
  gt: AuthRoleType
  gte: AuthRoleType
  iLike: AuthRoleType
  in: [AuthRoleType!]
  is: Boolean
  isNot: Boolean
  like: AuthRoleType
  lt: AuthRoleType
  lte: AuthRoleType
  neq: AuthRoleType
  notILike: AuthRoleType
  notIn: [AuthRoleType!]
  notLike: AuthRoleType
}

input CommentCreateDto {
  content: String!
  rate: [CommentRateEnum!]!
}

type CommentDto {
  author: User
  content: String!
  createdAt: DateTime!
  id: ID!
  rate: [CommentRateEnum!]!
  updatedAt: DateTime!
}

type CommentDtoAggregateGroupBy {
  id: ID
}

type CommentDtoAvgAggregate {
  id: Float
}

type CommentDtoConnection {
  """Array of edges."""
  edges: [CommentDtoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type CommentDtoCountAggregate {
  id: Int
}

input CommentDtoDeleteFilter {
  and: [CommentDtoDeleteFilter!]
  id: IDFilterComparison
  or: [CommentDtoDeleteFilter!]
}

type CommentDtoDeleteResponse {
  content: String
  createdAt: DateTime
  id: ID
  rate: [CommentRateEnum!]
  updatedAt: DateTime
}

type CommentDtoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the CommentDto"""
  node: CommentDto!
}

input CommentDtoFilter {
  and: [CommentDtoFilter!]
  id: IDFilterComparison
  or: [CommentDtoFilter!]
}

type CommentDtoMaxAggregate {
  id: ID
}

type CommentDtoMinAggregate {
  id: ID
}

input CommentDtoSort {
  direction: SortDirection!
  field: CommentDtoSortFields!
  nulls: SortNulls
}

enum CommentDtoSortFields {
  id
}

type CommentDtoSumAggregate {
  id: Float
}

input CommentDtoUpdateFilter {
  and: [CommentDtoUpdateFilter!]
  id: IDFilterComparison
  or: [CommentDtoUpdateFilter!]
}

enum CommentRateEnum {
  CO_TIEM_NANG
  CUNG_DUOC
  DANG_TIEN
  HAY
  SIEU_PHAM
  XAM_XI
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateCommentDto {
  content: String
  createdAt: DateTime
  id: ID
  rate: [CommentRateEnum!]
  updatedAt: DateTime
}

input CreateImageListInputDto {
  images: [MediaInput!]
}

input CreateInvestmentPackageDto {
  benefitRate: Float
  count: Float
  displayName: String
  fundedRate: Float
  id: ID
}

input CreateManyCommentDtosInput {
  """Array of records to create"""
  commentDtos: [CreateCommentDto!]!
}

input CreateManyImageListsInput {
  """Array of records to create"""
  imageLists: [CreateImageListInputDto!]!
}

input CreateManyInvestmentPackageDtosInput {
  """Array of records to create"""
  investmentPackageDtos: [CreateInvestmentPackageDto!]!
}

input CreateManyMediaDtosInput {
  """Array of records to create"""
  mediaDtos: [MediaInput!]!
}

input CreateManyShowcaseHighlightFeaturesInput {
  """Array of records to create"""
  showcaseHighlightFeatures: [ShowcaseHFCreateInputDto!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUser!]!
}

input CreateOneCommentDtoInput {
  """The record to create"""
  commentDto: CreateCommentDto!
}

input CreateOneImageListInput {
  """The record to create"""
  imageList: CreateImageListInputDto!
}

input CreateOneInvestmentPackageDtoInput {
  """The record to create"""
  investmentPackageDto: CreateInvestmentPackageDto!
}

input CreateOneMediaDtoInput {
  """The record to create"""
  mediaDto: MediaInput!
}

input CreateOneShowcaseHighlightFeatureInput {
  """The record to create"""
  showcaseHighlightFeature: ShowcaseHFCreateInputDto!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUser!
}

input CreateUser {
  email: String
  name: String
  role: AuthRoleType
  uid: ID
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyCommentDtosInput {
  """Filter to find records to delete"""
  filter: CommentDtoDeleteFilter!
}

input DeleteManyImageListsInput {
  """Filter to find records to delete"""
  filter: ImageListDeleteFilter!
}

input DeleteManyInvestmentPackageDtosInput {
  """Filter to find records to delete"""
  filter: InvestmentPackageDtoDeleteFilter!
}

input DeleteManyMediaDtosInput {
  """Filter to find records to delete"""
  filter: MediaDtoDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyShowcaseHighlightFeaturesInput {
  """Filter to find records to delete"""
  filter: ShowcaseHighlightFeatureDeleteFilter!
}

input DeleteManyShowcasesInput {
  """Filter to find records to delete"""
  filter: ShowcaseDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneCommentDtoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneImageListInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneInvestmentPackageDtoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneMediaDtoInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneShowcaseHighlightFeatureInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

interface IdInterface {
  id: ID!
}

type ImageList implements IdInterface {
  id: ID!
  images(
    """Specify to filter the records returned."""
    filter: MediaDtoFilter = {}

    """Specify to sort results."""
    sorting: [MediaDtoSort!] = []
  ): [MediaDto!]!
}

type ImageListAggregateGroupBy {
  id: ID
}

type ImageListConnection {
  """Array of edges."""
  edges: [ImageListEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ImageListCountAggregate {
  id: Int
}

input ImageListDeleteFilter {
  and: [ImageListDeleteFilter!]
  id: IDFilterComparison
  or: [ImageListDeleteFilter!]
}

type ImageListDeleteResponse {
  id: ID
}

type ImageListEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ImageList"""
  node: ImageList!
}

input ImageListFilter {
  and: [ImageListFilter!]
  id: IDFilterComparison
  or: [ImageListFilter!]
}

type ImageListMaxAggregate {
  id: ID
}

type ImageListMinAggregate {
  id: ID
}

input ImageListSort {
  direction: SortDirection!
  field: ImageListSortFields!
  nulls: SortNulls
}

enum ImageListSortFields {
  id
}

input ImageListUpdateFilter {
  and: [ImageListUpdateFilter!]
  id: IDFilterComparison
  or: [ImageListUpdateFilter!]
}

type InvestmentPackageDto {
  benefitRate: Float!
  count: Float!
  displayName: String!
  fundedRate: Float!
  id: ID!
}

type InvestmentPackageDtoAggregateGroupBy {
  displayName: String
  id: ID
}

type InvestmentPackageDtoAvgAggregate {
  id: Float
}

type InvestmentPackageDtoConnection {
  """Array of edges."""
  edges: [InvestmentPackageDtoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type InvestmentPackageDtoCountAggregate {
  displayName: Int
  id: Int
}

input InvestmentPackageDtoDeleteFilter {
  and: [InvestmentPackageDtoDeleteFilter!]
  displayName: StringFieldComparison
  id: IDFilterComparison
  or: [InvestmentPackageDtoDeleteFilter!]
}

type InvestmentPackageDtoDeleteResponse {
  benefitRate: Float
  count: Float
  displayName: String
  fundedRate: Float
  id: ID
}

type InvestmentPackageDtoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the InvestmentPackageDto"""
  node: InvestmentPackageDto!
}

input InvestmentPackageDtoFilter {
  and: [InvestmentPackageDtoFilter!]
  displayName: StringFieldComparison
  id: IDFilterComparison
  or: [InvestmentPackageDtoFilter!]
}

type InvestmentPackageDtoMaxAggregate {
  displayName: String
  id: ID
}

type InvestmentPackageDtoMinAggregate {
  displayName: String
  id: ID
}

input InvestmentPackageDtoSort {
  direction: SortDirection!
  field: InvestmentPackageDtoSortFields!
  nulls: SortNulls
}

enum InvestmentPackageDtoSortFields {
  displayName
  id
}

type InvestmentPackageDtoSumAggregate {
  id: Float
}

input InvestmentPackageDtoUpdateFilter {
  and: [InvestmentPackageDtoUpdateFilter!]
  displayName: StringFieldComparison
  id: IDFilterComparison
  or: [InvestmentPackageDtoUpdateFilter!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MediaDto implements IdInterface {
  filename: String!
  id: ID!
  mimetype: String!
  path: String!
  type: String!
}

type MediaDtoAggregateGroupBy {
  filename: String
  id: ID
}

type MediaDtoConnection {
  """Array of edges."""
  edges: [MediaDtoEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type MediaDtoCountAggregate {
  filename: Int
  id: Int
}

input MediaDtoDeleteFilter {
  and: [MediaDtoDeleteFilter!]
  filename: StringFieldComparison
  id: IDFilterComparison
  or: [MediaDtoDeleteFilter!]
}

type MediaDtoDeleteResponse {
  filename: String
  id: ID
  mimetype: String
  path: String
  type: String
}

type MediaDtoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the MediaDto"""
  node: MediaDto!
}

input MediaDtoFilter {
  and: [MediaDtoFilter!]
  filename: StringFieldComparison
  id: IDFilterComparison
  or: [MediaDtoFilter!]
}

type MediaDtoMaxAggregate {
  filename: String
  id: ID
}

type MediaDtoMinAggregate {
  filename: String
  id: ID
}

input MediaDtoSort {
  direction: SortDirection!
  field: MediaDtoSortFields!
  nulls: SortNulls
}

enum MediaDtoSortFields {
  filename
  id
}

input MediaDtoUpdateFilter {
  and: [MediaDtoUpdateFilter!]
  filename: StringFieldComparison
  id: IDFilterComparison
  or: [MediaDtoUpdateFilter!]
}

input MediaInput {
  filename: String!
  mimetype: String!
  path: String!
}

type Mutation {
  addCommentsToShowcase(input: AddCommentsToShowcaseInput!): Showcase!
  addHighlightFeaturesToShowcase(input: AddHighlightFeaturesToShowcaseInput!): Showcase!
  addImageListsToShowcase(input: AddImageListsToShowcaseInput!): Showcase!
  addImagesToImageList(input: AddImagesToImageListInput!): ImageList!
  createManyCommentDtos(input: CreateManyCommentDtosInput!): [CommentDto!]!
  createManyImageLists(input: CreateManyImageListsInput!): [ImageList!]!
  createManyInvestmentPackageDtos(input: CreateManyInvestmentPackageDtosInput!): [InvestmentPackageDto!]!
  createManyMediaDtos(input: CreateManyMediaDtosInput!): [MediaDto!]!
  createManyShowcaseHighlightFeatures(input: CreateManyShowcaseHighlightFeaturesInput!): [ShowcaseHighlightFeature!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneCommentDto(input: CreateOneCommentDtoInput!): CommentDto!
  createOneImageList(input: CreateOneImageListInput!): ImageList!
  createOneInvestmentPackageDto(input: CreateOneInvestmentPackageDtoInput!): InvestmentPackageDto!
  createOneMediaDto(input: CreateOneMediaDtoInput!): MediaDto!
  createOneSetting(input: SettingCreateDto!): Boolean!
  createOneShowcase(input: ShowcaseCreateInputDto!): Showcase!
  createOneShowcaseHighlightFeature(input: CreateOneShowcaseHighlightFeatureInput!): ShowcaseHighlightFeature!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyCommentDtos(input: DeleteManyCommentDtosInput!): DeleteManyResponse!
  deleteManyImageLists(input: DeleteManyImageListsInput!): DeleteManyResponse!
  deleteManyInvestmentPackageDtos(input: DeleteManyInvestmentPackageDtosInput!): DeleteManyResponse!
  deleteManyMediaDtos(input: DeleteManyMediaDtosInput!): DeleteManyResponse!
  deleteManyShowcaseHighlightFeatures(input: DeleteManyShowcaseHighlightFeaturesInput!): DeleteManyResponse!
  deleteManyShowcases(input: DeleteManyShowcasesInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneCommentDto(input: DeleteOneCommentDtoInput!): CommentDtoDeleteResponse!
  deleteOneImageList(input: DeleteOneImageListInput!): ImageListDeleteResponse!
  deleteOneInvestmentPackageDto(input: DeleteOneInvestmentPackageDtoInput!): InvestmentPackageDtoDeleteResponse!
  deleteOneMediaDto(input: DeleteOneMediaDtoInput!): MediaDtoDeleteResponse!
  deleteOneShowcase(slug: String!): Boolean!
  deleteOneShowcaseHighlightFeature(input: DeleteOneShowcaseHighlightFeatureInput!): ShowcaseHighlightFeatureDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  postAnonymousComment(input: CommentCreateDto!, slug: String!): CommentDto!
  postAuthorizedComment(input: CommentCreateDto!, slug: String!): CommentDto!
  removeAuthorFromCommentDto(input: RemoveAuthorFromCommentDtoInput!): CommentDto!
  removeAuthorFromShowcase(input: RemoveAuthorFromShowcaseInput!): Showcase!
  removeCommentsFromShowcase(input: RemoveCommentsFromShowcaseInput!): Showcase!
  removeHighlightFeaturesFromShowcase(input: RemoveHighlightFeaturesFromShowcaseInput!): Showcase!
  removeImageFromShowcase(input: RemoveImageFromShowcaseInput!): Showcase!
  removeImageFromShowcaseHighlightFeature(input: RemoveImageFromShowcaseHighlightFeatureInput!): ShowcaseHighlightFeature!
  removeImageListsFromShowcase(input: RemoveImageListsFromShowcaseInput!): Showcase!
  removeImagesFromImageList(input: RemoveImagesFromImageListInput!): ImageList!
  setAuthorOnCommentDto(input: SetAuthorOnCommentDtoInput!): CommentDto!
  setAuthorOnShowcase(input: SetAuthorOnShowcaseInput!): Showcase!
  setCommentsOnShowcase(input: SetCommentsOnShowcaseInput!): Showcase!
  setHighlightFeaturesOnShowcase(input: SetHighlightFeaturesOnShowcaseInput!): Showcase!
  setImageListsOnShowcase(input: SetImageListsOnShowcaseInput!): Showcase!
  setImageOnShowcase(input: SetImageOnShowcaseInput!): Showcase!
  setImageOnShowcaseHighlightFeature(input: SetImageOnShowcaseHighlightFeatureInput!): ShowcaseHighlightFeature!
  setImagesOnImageList(input: SetImagesOnImageListInput!): ImageList!
  submitInvestor(form: SubmitInvestorInputDto!): Boolean!
  updateManyCommentDtos(input: UpdateManyCommentDtosInput!): UpdateManyResponse!
  updateManyImageLists(input: UpdateManyImageListsInput!): UpdateManyResponse!
  updateManyInvestmentPackageDtos(input: UpdateManyInvestmentPackageDtosInput!): UpdateManyResponse!
  updateManyMediaDtos(input: UpdateManyMediaDtosInput!): UpdateManyResponse!
  updateManyShowcaseHighlightFeatures(input: UpdateManyShowcaseHighlightFeaturesInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneCommentDto(input: UpdateOneCommentDtoInput!): CommentDto!
  updateOneImageList(input: UpdateOneImageListInput!): ImageList!
  updateOneInvestmentPackageDto(input: UpdateOneInvestmentPackageDtoInput!): InvestmentPackageDto!
  updateOneMediaDto(input: UpdateOneMediaDtoInput!): MediaDto!
  updateOneSetting(input: SettingCreateDto!): Boolean!
  updateOneShowcase(input: ShowcaseCreateInputDto!, slug: String!): Boolean!
  updateOneShowcaseHighlightFeature(input: UpdateOneShowcaseHighlightFeatureInput!): ShowcaseHighlightFeature!
  updateOneUser(input: UpdateOneUserInput!): User!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

input PublishStatusFilterComparison {
  eq: PublishStatus
  gt: PublishStatus
  gte: PublishStatus
  iLike: PublishStatus
  in: [PublishStatus!]
  is: Boolean
  isNot: Boolean
  like: PublishStatus
  lt: PublishStatus
  lte: PublishStatus
  neq: PublishStatus
  notILike: PublishStatus
  notIn: [PublishStatus!]
  notLike: PublishStatus
}

type Query {
  commentDto(
    """The id of the record to find."""
    id: ID!
  ): CommentDto
  commentDtos(
    """Specify to filter the records returned."""
    filter: CommentDtoFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [CommentDtoSort!] = []
  ): CommentDtoConnection!
  imageList(
    """The id of the record to find."""
    id: ID!
  ): ImageList
  imageLists(
    """Specify to filter the records returned."""
    filter: ImageListFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ImageListSort!] = []
  ): ImageListConnection!
  investmentPackageDto(
    """The id of the record to find."""
    id: ID!
  ): InvestmentPackageDto
  investmentPackageDtos(
    """Specify to filter the records returned."""
    filter: InvestmentPackageDtoFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [InvestmentPackageDtoSort!] = []
  ): InvestmentPackageDtoConnection!
  mediaDto(
    """The id of the record to find."""
    id: ID!
  ): MediaDto
  mediaDtos(
    """Specify to filter the records returned."""
    filter: MediaDtoFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [MediaDtoSort!] = []
  ): MediaDtoConnection!
  setting(key: String!): SettingDto
  settings(keys: [String!]!): [SettingDto!]!
  showcase(slug: String!): Showcase!
  showcaseHighlightFeature(
    """The id of the record to find."""
    id: ID!
  ): ShowcaseHighlightFeature
  showcaseHighlightFeatures(
    """Specify to filter the records returned."""
    filter: ShowcaseHighlightFeatureFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ShowcaseHighlightFeatureSort!] = []
  ): ShowcaseHighlightFeatureConnection!
  showcases(
    """Specify to filter the records returned."""
    filter: ShowcaseFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ShowcaseSort!] = []
  ): ShowcaseConnection!
  slugs: [String!]!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
}

input RemoveAuthorFromCommentDtoInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveAuthorFromShowcaseInput {
  """The id of the record."""
  id: String!

  """The id of relation."""
  relationId: ID!
}

input RemoveCommentsFromShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveHighlightFeaturesFromShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveImageFromShowcaseHighlightFeatureInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveImageFromShowcaseInput {
  """The id of the record."""
  id: String!

  """The id of relation."""
  relationId: ID!
}

input RemoveImageListsFromShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveImagesFromImageListInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetAuthorOnCommentDtoInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetAuthorOnShowcaseInput {
  """The id of the record."""
  id: String!

  """The id of relation."""
  relationId: ID!
}

input SetCommentsOnShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetHighlightFeaturesOnShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetImageListsOnShowcaseInput {
  """The id of the record."""
  id: String!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetImageOnShowcaseHighlightFeatureInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetImageOnShowcaseInput {
  """The id of the record."""
  id: String!

  """The id of relation."""
  relationId: ID!
}

input SetImagesOnImageListInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SettingCreateDto {
  key: String!
  value: JSONObject!
}

type SettingDto {
  id: ID!
  key: String!
  value: JSONObject!
}

type SettingDtoEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the SettingDto"""
  node: SettingDto!
}

type Showcase {
  author: User!
  brand: ShowcaseBrand!
  comments(
    """Specify to filter the records returned."""
    filter: CommentDtoFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [CommentDtoSort!] = []
  ): ShowcaseCommentsConnection!
  createdAt: DateTime!
  description: String!
  expectedQuantity: ShowcasePrice
  expectedSaleAt: DateTime
  expectedSaleEndAt: DateTime
  expectedSalePrice: ShowcasePrice
  highlightFeatures(
    """Specify to filter the records returned."""
    filter: ShowcaseHighlightFeatureFilter = {}

    """Specify to sort results."""
    sorting: [ShowcaseHighlightFeatureSort!] = []
  ): [ShowcaseHighlightFeature!]!
  id: ID!
  image: MediaDto!
  imageLists(
    """Specify to filter the records returned."""
    filter: ImageListFilter = {}

    """Specify to sort results."""
    sorting: [ImageListSort!] = []
  ): [ImageList!]!
  inventory: ShowcaseInventoryDto
  investorStat: ShowcaseInvestorStatDto
  name: String!
  publishStatus: PublishStatus!
  slug: String!
  status: ShowcaseStatus!
  updatedAt: DateTime!
}

type ShowcaseAggregateGroupBy {
  expectedSaleAt: DateTime
  expectedSaleEndAt: DateTime
  name: String
  publishStatus: PublishStatus
  slug: String
  status: ShowcaseStatus
  updatedAt: DateTime
}

type ShowcaseBrand {
  description: String!
  name: String!
}

input ShowcaseBrandInput {
  description: String!
  name: String!
}

type ShowcaseCommentsConnection {
  """Array of nodes."""
  nodes: [CommentDto!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ShowcaseConnection {
  """Array of edges."""
  edges: [ShowcaseEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ShowcaseCountAggregate {
  expectedSaleAt: Int
  expectedSaleEndAt: Int
  name: Int
  publishStatus: Int
  slug: Int
  status: Int
  updatedAt: Int
}

input ShowcaseCreateInputDto {
  brand: ShowcaseBrandInput!
  description: String!
  expectedQuantity: ShowcasePriceInput
  expectedSaleAt: DateTime = null
  expectedSaleEndAt: DateTime = null
  expectedSalePrice: ShowcasePriceInput
  highlightFeatures: [ShowcaseHFCreateInputDto!]
  id: String
  image: MediaInput!
  imageLists: [CreateImageListInputDto!]
  inventory: ShowcaseInventoryDtoInput
  name: String!
  publishStatus: PublishStatus
  status: ShowcaseStatus!
}

input ShowcaseDeleteFilter {
  and: [ShowcaseDeleteFilter!]
  expectedSaleAt: DateFieldComparison
  expectedSaleEndAt: DateFieldComparison
  name: StringFieldComparison
  or: [ShowcaseDeleteFilter!]
  publishStatus: PublishStatusFilterComparison
  slug: StringFieldComparison
  status: ShowcaseStatusFilterComparison
  updatedAt: DateFieldComparison
}

type ShowcaseEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Showcase"""
  node: Showcase!
}

input ShowcaseFilter {
  and: [ShowcaseFilter!]
  expectedSaleAt: DateFieldComparison
  expectedSaleEndAt: DateFieldComparison
  name: StringFieldComparison
  or: [ShowcaseFilter!]
  publishStatus: PublishStatusFilterComparison
  slug: StringFieldComparison
  status: ShowcaseStatusFilterComparison
  updatedAt: DateFieldComparison
}

input ShowcaseHFCreateInputDto {
  description: String!
  id: String
  image: MediaInput!
  name: String!
}

type ShowcaseHighlightFeature {
  description: String!
  id: ID!
  image: MediaDto!
  name: String!
}

type ShowcaseHighlightFeatureAggregateGroupBy {
  id: ID
  name: String
}

type ShowcaseHighlightFeatureConnection {
  """Array of edges."""
  edges: [ShowcaseHighlightFeatureEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ShowcaseHighlightFeatureCountAggregate {
  id: Int
  name: Int
}

input ShowcaseHighlightFeatureDeleteFilter {
  and: [ShowcaseHighlightFeatureDeleteFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ShowcaseHighlightFeatureDeleteFilter!]
}

type ShowcaseHighlightFeatureDeleteResponse {
  description: String
  id: ID
  name: String
}

type ShowcaseHighlightFeatureEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the ShowcaseHighlightFeature"""
  node: ShowcaseHighlightFeature!
}

input ShowcaseHighlightFeatureFilter {
  and: [ShowcaseHighlightFeatureFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ShowcaseHighlightFeatureFilter!]
}

type ShowcaseHighlightFeatureMaxAggregate {
  id: ID
  name: String
}

type ShowcaseHighlightFeatureMinAggregate {
  id: ID
  name: String
}

input ShowcaseHighlightFeatureSort {
  direction: SortDirection!
  field: ShowcaseHighlightFeatureSortFields!
  nulls: SortNulls
}

enum ShowcaseHighlightFeatureSortFields {
  id
  name
}

input ShowcaseHighlightFeatureUpdateFilter {
  and: [ShowcaseHighlightFeatureUpdateFilter!]
  id: IDFilterComparison
  name: StringFieldComparison
  or: [ShowcaseHighlightFeatureUpdateFilter!]
}

"""Thông tin về chi phí vận hành showcase"""
type ShowcaseInventoryDto {
  """Tỉ lệ chi phí quảng cáo"""
  adCostRate: Float!

  """Tỉ lệ giá vốn/giá bán sản phẩm"""
  capitalizationRate: Float!

  """Tốc độ tăng trưởng kì vọng"""
  expectedGrowthRate: Float!

  """Tỉ lệ chi phí vận hành"""
  operatingCostRate: Float!

  """Vòng quay vốn an toàn tương ứng"""
  revolvingInterval: Float!
}

input ShowcaseInventoryDtoInput {
  """Tỉ lệ chi phí quảng cáo"""
  adCostRate: Float!

  """Tỉ lệ giá vốn/giá bán sản phẩm"""
  capitalizationRate: Float!

  """Tốc độ tăng trưởng kì vọng"""
  expectedGrowthRate: Float!

  """Tỉ lệ chi phí vận hành"""
  operatingCostRate: Float!

  """Vòng quay vốn an toàn tương ứng"""
  revolvingInterval: Float!
}

type ShowcaseInvestorStatDto {
  """Tổng chi phí quảng cáo trung bình"""
  adCost: String!
  adCostRate: Float!
  campaignDuration: Float!
  capitalizationCost: String!
  capitalizationRate: Float!
  expectedProfit: String!

  """Doanh thu dự kiến năm đầu"""
  firstYearRevenue: Float!
  growthRate: Float!
  initialCapital: String!
  operatingCost: String!
  operatingCostRate: Float!
  revolvingInterval: Float!
  revolvingPerDay: Float!

  """Doanh thu tổng"""
  totalRevenue: Float!
}

type ShowcaseMaxAggregate {
  expectedSaleAt: DateTime
  expectedSaleEndAt: DateTime
  name: String
  publishStatus: PublishStatus
  slug: String
  status: ShowcaseStatus
  updatedAt: DateTime
}

type ShowcaseMinAggregate {
  expectedSaleAt: DateTime
  expectedSaleEndAt: DateTime
  name: String
  publishStatus: PublishStatus
  slug: String
  status: ShowcaseStatus
  updatedAt: DateTime
}

type ShowcasePrice {
  pioneer: Float!
  preorder: Float!
  promo: Float!
  regular: Float!
}

input ShowcasePriceInput {
  pioneer: Float!
  preorder: Float!
  promo: Float!
  regular: Float!
}

input ShowcaseSort {
  direction: SortDirection!
  field: ShowcaseSortFields!
  nulls: SortNulls
}

enum ShowcaseSortFields {
  expectedSaleAt
  expectedSaleEndAt
  name
  publishStatus
  slug
  status
  updatedAt
}

enum ShowcaseStatus {
  COMING
  IDEA
  SHOWCASE
}

input ShowcaseStatusFilterComparison {
  eq: ShowcaseStatus
  gt: ShowcaseStatus
  gte: ShowcaseStatus
  iLike: ShowcaseStatus
  in: [ShowcaseStatus!]
  is: Boolean
  isNot: Boolean
  like: ShowcaseStatus
  lt: ShowcaseStatus
  lte: ShowcaseStatus
  neq: ShowcaseStatus
  notILike: ShowcaseStatus
  notIn: [ShowcaseStatus!]
  notLike: ShowcaseStatus
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input SubmitInvestorInputDto {
  email: String!
  fund: String!
  job: String!
  method: String!
  phone: String!
  purpose: String!
}

input UpdateCommentDto {
  content: String
  createdAt: DateTime
  id: ID
  rate: [CommentRateEnum!]
  updatedAt: DateTime
}

input UpdateImageList {
  id: ID
}

input UpdateInvestmentPackageDto {
  benefitRate: Float
  count: Float
  displayName: String
  fundedRate: Float
  id: ID
}

input UpdateManyCommentDtosInput {
  """Filter used to find fields to update"""
  filter: CommentDtoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCommentDto!
}

input UpdateManyImageListsInput {
  """Filter used to find fields to update"""
  filter: ImageListUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateImageList!
}

input UpdateManyInvestmentPackageDtosInput {
  """Filter used to find fields to update"""
  filter: InvestmentPackageDtoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateInvestmentPackageDto!
}

input UpdateManyMediaDtosInput {
  """Filter used to find fields to update"""
  filter: MediaDtoUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMediaDto!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyShowcaseHighlightFeaturesInput {
  """Filter used to find fields to update"""
  filter: ShowcaseHighlightFeatureUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateShowcaseHighlightFeature!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUser!
}

input UpdateMediaDto {
  filename: String
  id: ID
  mimetype: String
  path: String
  type: String
}

input UpdateOneCommentDtoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCommentDto!
}

input UpdateOneImageListInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateImageList!
}

input UpdateOneInvestmentPackageDtoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateInvestmentPackageDto!
}

input UpdateOneMediaDtoInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMediaDto!
}

input UpdateOneShowcaseHighlightFeatureInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateShowcaseHighlightFeature!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUser!
}

input UpdateShowcaseHighlightFeature {
  description: String
  id: ID
  name: String
}

input UpdateUser {
  email: String
  name: String
  role: AuthRoleType
  uid: ID
}

type User {
  email: String!
  name: String!
  role: AuthRoleType!
  uid: ID!
}

type UserAggregateGroupBy {
  email: String
  role: AuthRoleType
  uid: ID
}

type UserConnection {
  """Array of edges."""
  edges: [UserEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type UserCountAggregate {
  email: Int
  role: Int
  uid: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  email: StringFieldComparison
  or: [UserDeleteFilter!]
  role: AuthRoleTypeFilterComparison
  uid: IDFilterComparison
}

type UserDeleteResponse {
  email: String
  name: String
  role: AuthRoleType
  uid: ID
}

type UserEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the User"""
  node: User!
}

input UserFilter {
  and: [UserFilter!]
  email: StringFieldComparison
  or: [UserFilter!]
  role: AuthRoleTypeFilterComparison
  uid: IDFilterComparison
}

type UserMaxAggregate {
  email: String
  role: AuthRoleType
  uid: ID
}

type UserMinAggregate {
  email: String
  role: AuthRoleType
  uid: ID
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  email
  role
  uid
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  email: StringFieldComparison
  or: [UserUpdateFilter!]
  role: AuthRoleTypeFilterComparison
  uid: IDFilterComparison
}
