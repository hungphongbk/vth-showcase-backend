# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

"""Cursor for paging through collections"""
scalar ConnectionCursor

input CreateManyMediaInput {
  """Array of records to create"""
  media: [CreateMedia!]!
}

input CreateMedia {
  filename: String
  id: ID
  mimetype: String
  path: String
}

input CreateOneMediaInput {
  """The record to create"""
  media: CreateMedia!
}

input CreateOneShowcaseInput {
  """The record to create"""
  showcase: CreateShowcase!
}

input CreateShowcase {
  author: String
  createdAt: DateTime
  description: String
  id: ID
  name: String
  slug: String
  status: ShowcaseStatus
  updatedAt: DateTime
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyMediaInput {
  """Filter to find records to delete"""
  filter: MediaDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteOneMediaInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneShowcaseInput {
  """The id of the record to delete."""
  id: String!
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Media {
  filename: String!
  id: ID!
  mimetype: String!
  path: String!
}

type MediaAggregateGroupBy {
  id: ID
}

type MediaConnection {
  """Array of edges."""
  edges: [MediaEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type MediaCountAggregate {
  id: Int
}

input MediaDeleteFilter {
  and: [MediaDeleteFilter!]
  id: IDFilterComparison
  or: [MediaDeleteFilter!]
}

type MediaDeleteResponse {
  filename: String
  id: ID
  mimetype: String
  path: String
}

type MediaEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Media"""
  node: Media!
}

input MediaFilter {
  and: [MediaFilter!]
  id: IDFilterComparison
  or: [MediaFilter!]
}

type MediaMaxAggregate {
  id: ID
}

type MediaMinAggregate {
  id: ID
}

input MediaSort {
  direction: SortDirection!
  field: MediaSortFields!
  nulls: SortNulls
}

enum MediaSortFields {
  id
}

input MediaUpdateFilter {
  and: [MediaUpdateFilter!]
  id: IDFilterComparison
  or: [MediaUpdateFilter!]
}

type Mutation {
  createManyMedia(input: CreateManyMediaInput!): [Media!]!
  createOneMedia(input: CreateOneMediaInput!): Media!
  createOneShowcase(input: CreateOneShowcaseInput!): Showcase!
  deleteManyMedia(input: DeleteManyMediaInput!): DeleteManyResponse!
  deleteOneMedia(input: DeleteOneMediaInput!): MediaDeleteResponse!
  deleteOneShowcase(input: DeleteOneShowcaseInput!): ShowcaseDeleteResponse!
  removeImageFromShowcase(input: RemoveImageFromShowcaseInput!): Showcase!
  setImageOnShowcase(input: SetImageOnShowcaseInput!): Showcase!
  updateManyMedia(input: UpdateManyMediaInput!): UpdateManyResponse!
  updateOneMedia(input: UpdateOneMediaInput!): Media!
  updateOneShowcase(input: UpdateOneShowcaseInput!): Showcase!
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  media(
    """Specify to filter the records returned."""
    filter: MediaFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [MediaSort!] = []
  ): MediaConnection!
  showcase(slug: String!): Showcase!
  showcases(
    """Specify to filter the records returned."""
    filter: ShowcaseFilter = {}

    """Limit or page results."""
    paging: CursorPaging = {first: 10}

    """Specify to sort results."""
    sorting: [ShowcaseSort!] = []
  ): ShowcaseConnection!
}

input RemoveImageFromShowcaseInput {
  """The id of the record."""
  id: String!

  """The id of relation."""
  relationId: ID!
}

input SetImageOnShowcaseInput {
  """The id of the record."""
  id: String!

  """The id of relation."""
  relationId: ID!
}

type Showcase {
  author: String!
  createdAt: DateTime!
  description: String!
  id: ID!
  image: Media!
  name: String!
  slug: String!
  status: ShowcaseStatus!
  updatedAt: DateTime!
}

type ShowcaseAggregateGroupBy {
  slug: String
}

type ShowcaseConnection {
  """Array of edges."""
  edges: [ShowcaseEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type ShowcaseCountAggregate {
  slug: Int
}

type ShowcaseDeleteResponse {
  author: String
  createdAt: DateTime
  description: String
  id: ID
  name: String
  slug: String
  status: ShowcaseStatus
  updatedAt: DateTime
}

type ShowcaseEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the Showcase"""
  node: Showcase!
}

input ShowcaseFilter {
  and: [ShowcaseFilter!]
  or: [ShowcaseFilter!]
  slug: StringFieldComparison
}

type ShowcaseMaxAggregate {
  slug: String
}

type ShowcaseMinAggregate {
  slug: String
}

input ShowcaseSort {
  direction: SortDirection!
  field: ShowcaseSortFields!
  nulls: SortNulls
}

enum ShowcaseSortFields {
  slug
}

enum ShowcaseStatus {
  COMING
  IDEA
  SHOWCASE
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateManyMediaInput {
  """Filter used to find fields to update"""
  filter: MediaUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateMedia!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateMedia {
  filename: String
  id: ID
  mimetype: String
  path: String
}

input UpdateOneMediaInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateMedia!
}

input UpdateOneShowcaseInput {
  """The id of the record to update"""
  id: String!

  """The update to apply."""
  update: UpdateShowcase!
}

input UpdateShowcase {
  author: String
  createdAt: DateTime
  description: String
  id: ID
  name: String
  slug: String
  status: ShowcaseStatus
  updatedAt: DateTime
}
